<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" creationComplete="init(event)" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="EditView" xmlns:components="components.*">
	<fx:Script>
		<![CDATA[
			import coldfusion.air.Session;
			import coldfusion.air.SessionToken;
			import coldfusion.air.SyncManager;
			import coldfusion.air.events.ConflictEvent;
			import coldfusion.air.events.SessionFaultEvent;
			import coldfusion.air.events.SessionResultEvent;
			import coldfusion.air.events.SyncResultEvent;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.Responder;
			
			import vo.Person;
			
			[Bindable]
			protected var person:Person = new Person;
			protected var conflicts:ArrayCollection = new ArrayCollection();
			
			protected var syncmanager:SyncManager;
			protected var session:Session;
			
			protected function init(event:FlexEvent):void
			{
				if (data.syncmanager){
					syncmanager = data.syncmanager;
				}
				
				if (data.person){
					person = data.person;
				}
				
				if (data.session){
					session = data.session;
				}
				
				syncmanager.addEventListener(ConflictEvent.CONFLICT, conflictHandler);
				
			}
			
			protected function saveBtn_clickHandler(event:MouseEvent):void
			{
				//session.saveUpdate saves record to SQLite Database
				var savetoken:SessionToken = session.saveUpdate(person); 
				savetoken.addResponder(new mx.rpc.Responder(saveSuccess, savefault));
				
			}
			
			private function saveSuccess(event:SessionResultEvent):void
			{
				saveRemote();
				
			}
			
			private function savefault():void
			{
				// TODO Auto Generated method stub
				
			}
			
			private function saveRemote():void
			{
				var committoken:SessionToken = session.commit();
				committoken.addResponder(new mx.rpc.Responder(commitSuccess, commitFault));   
			}
			
			private function commitSuccess(event:SessionResultEvent):void
			{
				trace(event.result.toString());
				alert.open(this,true);
			}
			
			private function commitFault(event:SessionFaultEvent):void
			{
				trace(event.error.message);
				
			}
			
			private function conflictHandler(event:ConflictEvent):void 
			{ 
				conflicts = event.result as ArrayCollection; 
				popup.open(this,true);
				
			} 
			
			
			private function conflictSuccess(event:SessionResultEvent):void
			{
				
			}
			
			
			private function conflictFault(event:SessionResultEvent):void
			{
				// TODO Auto Generated method stub
				
			}
			
			protected function popup_serverHandler(event:Event):void
			{
				var token:SessionToken = session.keepAllServerObjects(conflicts);
				token.addResponder(new mx.rpc.Responder(conflictSuccess, conflictFault)); 
				
			}
			
			protected function popup_clientHandler(event:Event):void
			{
				var token:SessionToken = session.keepAllClientObjects(conflicts);
				token.addResponder(new mx.rpc.Responder(conflictSuccess, conflictFault)); 
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<components:Alert id="alert" message="Your changes have been saved" x="100" y="300" />
		<components:ConflictPopUp id="popup" server="popup_serverHandler(event)" client="popup_clientHandler(event)" x="100" y="300" />
	</fx:Declarations>
	
	<s:VGroup top="5" bottom="5" left="5" right="5" gap="10">
		<s:Label text="First Name:"/>
		<s:TextInput id="firstname" text="@{person.firstName}" />
		
		<s:Label text="Last Name:"/>
		<s:TextInput id="lastname" text="@{person.lastName}" />
		
		<s:Label text="Blog:"/>
		<s:TextInput id="blog" text="@{person.blog}" />
		
		<s:Label text="Twitter:"/>
		<s:TextInput id="twitter" text="@{person.twitter}" />
		
		<s:Label text="Location:"/>
		<s:TextInput id="location" text="@{person.location}" />
		
	</s:VGroup>

	<s:viewMenuItems>
		<s:ViewMenuItem id="saveBtn" label="Save" click="saveBtn_clickHandler(event)" />
	</s:viewMenuItems>

</s:View>
